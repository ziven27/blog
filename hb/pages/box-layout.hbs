<style>
	.mr20 { margin-right: 20px; }
	.mb20 { margin-bottom: 20px; }
	.pr{ position: relative;  }
	.pa{ position: absolute; }
	.pf{ position: fixed; }
	.ti2 { text-indent: 2em; }
	.tac { text-align: center; }
	.tar { text-align: right; }
	.taj { text-align: justify; }
	.wrap { width: 640px; margin-left: auto; margin-right: auto; }
	.fl { float: left; display: inline; }
	.fr { float: right; }
	.td { background-color: #ddd; min-height: 40px; }
	.w300 { width: 300px; }
	.w100 { width: 100px; }
	.w200 { width: 200px; }
	.w40p { width: 40%; }
	.cell { display: table-cell; *display: inline-block; width: 2000px; *width: auto; }
	.wall { border: 1px dashed #000; text-align: center; }
	.frame { display: inline-block; border: 20px solid #000; padding: 20px; }
	.frame-color { border-color: red yellow blue green; }
	.photo { display: inline-block; width: 200px; height: 100px; background-color: #ddd; line-height: 100px; text-align: center; }
	.photo:before { content: '我的靓照'; color: #fff; font-size: 40px; }
	.wall-1 .frame { margin: 20px; }
	code{ background-color: #eee; border-radius: 2px; margin: 0 5px; }
	.cf { *zoom: 1; }
	.cf:after { display: table; content: ''; clear: both; }
	.pr-demo .fream{ left: 50%; margin-left: -140px; }
	.pa-box{ height: 300px; border: 1px dashed #000; }
	.pa-demo .frame{ top: 50%; left: 50%; margin: -90px 0 0 -140px; }
	.pf-demo { bottom: 30px; right: 10px; }
</style>
<h2>盒状模型</h2>
<div class="wall wall-1">
	<span class="frame">
		<span class="photo"></span>
	</span>
	<span class="frame">
		<span class="photo"></span>
	</span>
	<span class="frame">
		<span class="photo"></span>
	</span>
	<span class="frame frame-color">
		<span class="photo"></span>
	</span>
</div>
<p>盒模型最好的例子就是墙上排列整齐的相框了。</p>
<ol>
	<li>Margin：相框与其它相框的间距</li>
	<li>Border：宜家的木质边框</li>
	<li>Padding：相框里相片与相框的距离</li>
	<li>Content：我的靓照</li>
</ol>
<h3>tip：</h3>
<p>css的边框设计原理和木头拼接的相框是一样儿，一样的，所以我们可以根据这个特性实现<a href="http://www.ziven27.com/cssAngle/" target="_blank">css 三角</a>。</p>
<hr>
<h2>布局</h2>
<h3>行内布局</h3>
<div class="wrap">
	<p>这是一段占位符(默认)</p>
	<p class="tac">这是一段占位符(居中)</p>
	<p class="tar">这是一段占位符(右对齐)</p>
	<p class="taj">这是一段很长很长很长很长很长很长很长，很长很长很长很长很长很长很长很长很长，很长很长很长很长很长很长很长很长很长很长很长，很长很长很长很长很长很长很长很长，很长很长很长很长很长很长很长很长很长很长的占位符(两端对齐)。</p>
	<p class="ti2">这是一段很长很长很长很长很长很长很长，很长很长很长很长很长很长很长很长很长，很长很长很长很长很长很长很长很长很长很长很长，很长很长很长很长很长很长很长很长，很长很长很长很长很长很长很长很长很长很长的占位符(首行空两个字符)。</p>
	<p>
		<button type="button">这是一个按钮</button>
		<button type="button">这是一个按钮</button>
		<button type="button">这是一个按钮</button>
		<button type="button">这是一个按钮</button>
		<button type="button">这是一个按钮</button>
		<button type="button">这是一个按钮</button>
	</p>
</div>
<ol>
	<li>左对齐<code>text-align:left;</code></li>
	<li>右对齐<code>text-align:right;</code></li>
	<li>居中<code>text-align:center;</code></li>
	<li>两端对齐<code>text-align:justify;</code></li>
	<li>首行空两个字符<code>text-indent:2em;</code></li>
	<li>注意inline-block元素之间大概3像素的间距;</li>
</ol>
<h3>浮动布局</h3>
<div>
	<div class="wrap cf mb20">
		<div class="fl td mr20 w100"></div>
		<div class="cell"><div class="td"></div></div>
	</div>
	<div class="wrap cf mb20">
		<div class="fl td w300"></div>
		<div class="fr td w300"></div>
	</div>
	<div class="wrap cf mb20">
		<div class="fl td w200 mr20"></div>
		<div class="fl td w200 mr20"></div>
		<div class="fl td w200"></div>
	</div>
</div>
<ol>
	<li>
		常用的布局方式<code>.cf>.fl.mr20*n+.fr</code>最后一个元素去掉右边距（n为任一数目）。
	</li>
	<li>
		左边固定右边自适应<code>.cf>.fl.mr20+.cell</code>。
	</li>
</ol>
<h3>定位布局</h3>
<p>定位布局都是相对于其参照容器的左上角来进行定位的。相对定位和绝对定位参考容器是其最近的父级容器，窗体定位的参考容器是窗体。</p>
<h4>相对定位</h4>
<div class="wall wall-1 pr-demo">
	<span class="frame pr">
		<span class="photo"></span>
	</span>
</div>
<p>内容可以撑开父级高度。</p>
<h4>绝对定位</h4>
<div class="pa-box pr pa-demo">
	<span class="frame pa">
		<span class="photo"></span>
	</span>
</div>
<p>父级需要设定<code>position:relative</code>,同时需要设定高度。</p>
<h4>窗体定位</h4>
<span class="frame pf-demo">
	<span class="photo"></span>
</span>